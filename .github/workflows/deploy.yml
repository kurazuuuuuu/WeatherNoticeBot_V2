# .github/workflows/deploy.yml

name: 自動デプロイ

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: 1. リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: 2. Docker環境を確認
      run: |
        echo "🐳 Docker環境を確認します..."
        if ! docker info > /dev/null 2>&1; then
          echo "⚠️ Dockerコマンドの実行に失敗しました。ランナーのセットアップを確認してください。"
          exit 1
        fi
        docker --version
        docker compose version

    - name: 3. ボリューム用ディレクトリを作成
      run: |
        mkdir -p ./logs ./data

    - name: 4. 環境変数ファイル (.env) を生成
      run: |
        echo "🔑 シークレットから .env ファイルを生成します..."
        # 確実性を優先し、一行ずつファイルに書き込みます
        > .env # ファイルを初期化
        echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env
        echo "DISCORD_GUILD_ID=${{ secrets.DISCORD_GUILD_ID }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
        echo "✅ .env ファイルが正常に生成されました。"

    - name: 5. 既存のコンテナを停止・削除
      run: |
        echo "🧹 既存のコンテナを停止・削除します..."
        docker compose down --remove-orphans
    
    - name: 6. Dockerイメージをビルド
      run: |
        echo "🛠️ Dockerイメージをビルドします..."
        docker compose build
    
    - name: 7. データベースマイグレーションを実行
      run: |
        echo "🗄️ データベースマイグレーションを実行します..."
        docker compose run --rm weather-bot python -m alembic upgrade head
        echo "✅ データベースマイグレーションが完了しました"

    - name: 8. アプリケーションを起動
      run: |
        echo "🚀 アプリケーションを起動します..."
        docker compose up -d
    
    - name: 9. ヘルスチェックによる起動確認
      run: |
        echo "🩺 起動状態を確認します..."
        max_attempts=30
        interval=10
        
        for i in $(seq 1 $max_attempts); do
          # docker-compose.yml内のサービス名を指定
          health_status=$(docker inspect --format '{{.State.Health.Status}}' weather-bot 2>/dev/null)
          
          if [ "$health_status" = "healthy" ]; then
            echo "✅ アプリケーションは正常に起動しました！"
            docker compose ps
            break
          fi
          
          container_state=$(docker inspect --format '{{.State.Status}}' weather-bot 2>/dev/null)
          if [ "$container_state" != "running" ]; then
             echo "❌ コンテナが起動していません。"
             docker compose logs
             exit 1
          fi

          echo "⏳ 起動を待機中... (試行 $i/$max_attempts)"
          sleep $interval
        done
        
        if [ "$health_status" != "healthy" ]; then
          echo "❌ アプリケーションの起動に失敗しました。"
          docker compose logs
          exit 1
        fi
    
    - name: 10. デプロイ完了通知
      run: |
        echo "🎉 デプロイが正常に完了しました！"
