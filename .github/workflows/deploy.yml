name: 自動デプロイ

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Docker権限とサービス状態の確認
      run: |
        echo "現在のユーザー: $(whoami)"
        echo "ユーザーグループ: $(groups)"
        
        # Dockerサービスの状態確認
        if ! systemctl is-active --quiet docker; then
          echo "Dockerサービスを開始中..."
          sudo systemctl start docker
        fi
        
        # Docker接続テスト
        if ! docker info > /dev/null 2>&1; then
          echo "Docker権限の問題を検出しました。修正を試行します..."
          
          # dockerグループに追加（既に追加されている場合はスキップ）
          if ! groups | grep -q docker; then
            sudo usermod -aG docker $(whoami)
            echo "ユーザーをdockerグループに追加しました"
          fi
          
          # Docker socketの権限確認
          if [ ! -w /var/run/docker.sock ]; then
            sudo chmod 666 /var/run/docker.sock
            echo "Docker socketの権限を修正しました"
          fi
          
          # 再テスト
          if ! docker info > /dev/null 2>&1; then
            echo "❌ Docker権限の問題が解決されませんでした"
            echo "手動で以下のスクリプトを実行してください: ./scripts/fix-docker-permissions.sh"
            exit 1
          fi
        fi
        
        echo "✅ Docker接続が正常です"
        docker --version
        docker compose version
    
    - name: 既存のコンテナを停止・削除
      run: |
        echo "既存のコンテナを停止中..."
        docker compose down || true
        
        # 未使用のイメージとコンテナを削除
        docker system prune -f || true
    
    - name: 環境変数ファイルの確認
      run: |
        if [ ! -f .env ]; then
          echo "❌ エラー: .envファイルが見つかりません"
          echo "📝 .env.exampleを参考に.envファイルを作成してください"
          echo ""
          echo "必要な環境変数:"
          echo "- DISCORD_TOKEN (必須)"
          echo "- GEMINI_API_KEY (推奨)"
          echo "- その他の設定項目"
          echo ""
          echo "作成方法:"
          echo "cp .env.example .env"
          echo "# .envファイルを編集して実際の値を設定"
          exit 1
        else
          echo "✅ .envファイルが見つかりました"
          
          # 必須環境変数の確認
          missing_vars=()
          
          if ! grep -q "^DISCORD_TOKEN=" .env || grep -q "^DISCORD_TOKEN=$" .env || grep -q "^DISCORD_TOKEN=your_" .env; then
            missing_vars+=("DISCORD_TOKEN")
          fi
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "❌ エラー: 以下の必須環境変数が設定されていません:"
            for var in "${missing_vars[@]}"; do
              echo "  - $var"
            done
            echo ""
            echo ".envファイルを確認して、適切な値を設定してください"
            exit 1
          fi
          
          echo "✅ 必須環境変数が設定されています"
        fi
    
    - name: Dockerイメージをビルド
      run: |
        echo "Dockerイメージをビルド中..."
        docker compose build --no-cache
    
    - name: アプリケーションを起動
      run: |
        echo "アプリケーションを起動中..."
        docker compose up -d
    
    - name: デプロイ状況を確認
      run: |
        echo "コンテナの状態を確認中..."
        sleep 10
        docker compose ps
        
        echo "ログを確認中..."
        docker compose logs --tail=20 weather-bot
    
    - name: ヘルスチェック
      run: |
        echo "ヘルスチェックを実行中..."
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if docker compose ps | grep -q "healthy\|Up"; then
            echo "✅ アプリケーションが正常に起動しました！"
            break
          else
            echo "⏳ 起動を待機中... ($attempt/$max_attempts)"
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "❌ アプリケーションの起動に失敗しました。"
          docker compose logs weather-bot
          exit 1
        fi
    
    - name: デプロイ完了通知
      run: |
        echo "🎉 デプロイが完了しました！"
        echo "コミット: ${{ github.sha }}"
        echo "ブランチ: ${{ github.ref_name }}"
        echo "時刻: $(date '+%Y-%m-%d %H:%M:%S')"